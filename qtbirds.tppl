type QTTree =
  | QTLeaf { age: Real
           , index: Int
           , sequence: String
           , character: String
           , stateSequence: Int[]
           , characterState: Int
           }
  | QTNode { left: QTTree
           , right: QTTree
           , age: Real
           }
  | QTWeightedLeaf { age: Real
                   , messageSequence: Tensor[Real][]
                   , characterMessage: Tensor[Real]
                   , partialLogWeight: Real
                   }
  | QTWeightedNode { left: QTTree
                   , right: QTTree
                   , age: Real
                   , partialLogWeight: Real
                   }
  


function tree2string(tree: QTTree): String
{
  if (tree is QTLeaf)
  {
    return join(["QTLeaf(", int2string(tree.index), ")"]);
  } 
  
  if (tree is QTNode)
  {
    return join(["QTNode(", tree2string(tree.left), ", ", tree2string(tree.right), ")"]);
  } 
  
  if (tree is QTWeightedNode)
  {
    return join(["QTWeightedNode(", int2string(tree.index), ")"]);
  }
  
  if (tree is QTNode)
  {
    return join( ["QTLeaf(", int2string(tree.index), ")"] );
  }
  
  else
  {
    printLn("Error: coalesceQTTree: unexpected tree structure");
    return "Error: coalesceQTTree: unexpected tree structure";
  }
}


type ModelDynamics = ModelDynamics { qChar: Tensor[Real]
                                   , jChar: Tensor[Real]
                                   , qMol: Tensor[Real]
                                   , jMol: Tensor[Real]
                                   , nu: Real
                                   , charMessages: Real[][]
//                                 , molMessages: Real[][]
                                   }


/**
* Q-T-BIRDS model
*
* @param tree: QTTree
*    Annotated phylogenetic tree
* @param normQChar: Tensor[Real]
*    Normalized Q matrix for the phenotype
* @param JChar: Tensor[Real]
*    Jump matrix for the phenotype
* @param normQMol: Tensor[Real]
*    Normalized Q matrix for the gene
* @param JMol: Tensor[Real]
*    Jump matrix for the gene
* @param lamShape: Real
*    Hyperparameter of the Gamma distribution for the phenotype transition rate
* @param lamScale: Real
*    Hyperparameter of the Gamma distribution for the phenotype transition rate
* @param muShape: Real
*    Hyperparameter of the Gamma distribution for the gene transition rate
* @param muScale: Real
*    Hyperparameter of the Gamma distribution for the gene transition rate
* @param nuShape: Real
*    Hyperparameter of the Gamma distribution for the joint transition rate
* @param nuScale: Real
*    Hyperparameter of the Gamma distribution for the joint transition rate
*    
* @return String
*    Description of the return value
*/
model function qtbirds(tree: QTTree
                      , normQChar: Tensor[Real]
                      , jChar: Tensor[Real]
                      , charMessages: Real[][]
                      , normQMol: Tensor[Real]
                      , jMol: Tensor[Real]
                      , lamShape: Real
                      , lamScale: Real
                      , muShape: Real
                      , muScale: Real
                      , nuShape: Real
                      , nuScale: Real
                      ): Real 
{
  // printMtx(normQChar);
  // printMtx(jChar);
  // printMtx(normQMol);
  // printMtx(jMol);
  // printLn(real2string(lamShape));
  // printLn(real2string(lamScale));
  // printLn(real2string(muShape));
  // printLn(real2string(muScale));
  // printLn(real2string(nuShape));
  // printLn(real2string(nuScale));

  assume lam ~ Gamma(lamShape, lamScale);
  assume mu ~ Gamma(muShape, muScale);
  //let lam = 0.35;
  //let mu = 0.21;
  
  assume nu ~ Gamma(nuShape, nuScale);


  // $* scalar multiplication
  let m = ModelDynamics { qChar = lam $* normQChar
                        , jChar = jChar
                        , charMessages = charMessages
                        , qMol = mu $* normQMol
                        , jMol = jMol
                        , nu = nu
                        };

  let something = coalesceQTTree(tree, m);

  return mu;
}


/**
* Process a tree and a produce a weighted leaf.
*
* Processes a QTTree and conditions on its likelihood.
*
* It traverses the nodes of tree and calls coalesceQTTwig
* on subtrees that have just two children who are leafs.
*
* @param tree: QTTree
*
* @return QTTree that matches the QTWeightedLeaf constructor
*/
function coalesceQTTree(tree: QTTree, m: ModelDynamics) : QTTree
{
  if (tree.left is QTLeaf) && (tree.right is QTLeaf)
  {
    let newTree = QTWeightedNode { left = tree.left
                                 , right = tree.right
                                 , age = tree.age
                                 , partialLogWeight = 0.0
                                 }; 
    return coalesceQTTwig(newTree, m);
  } 
  
  if (tree.left is QTLeaf) && (tree.right is QTNode) {
    let rightTree = coalesceQTTree(tree.right, m); // matches QTWeightedLeaf
    let newTree = QTWeightedNode { left = tree.left
                                 , right = rightTree
                                 , age = tree.age
                                 , partialLogWeight = rightTree.partialLogWeight
                                 };
    return coalesceQTTwig(newTree, m);
  }
  
  if (tree.left is QTNode) && (tree.right is QTLeaf) 
  {
    let leftTree = coalesceQTTree(tree.left, m); // matches QTWeightedLeaf
    let newTree = QTWeightedNode { left = leftTree
                                 , right = tree.right
                                 , age = tree.age
                                 , partialLogWeight = leftTree.partialLogWeight
                                 };
    return coalesceQTTwig(newTree, m);
  } 
  
  if (tree.left is QTNode) && (tree.right is QTNode) 
  {
    let leftTree = coalesceQTTree(tree.left, m); // matches QTWeightedLeaf
    let rightTree = coalesceQTTree(tree.right, m); // matches QTWeightedLeaf
    let newTree = QTWeightedNode { left = leftTree
                                 , right = rightTree
                                 , age = tree.age
            , partialLogWeight = leftTree.partialLogWeight + rightTree.partialLogWeight
                                 };
    return coalesceQTTwig(newTree, m);
  } 
  
  else 
  {
    printLn("Error: coalesceQTTree: unexpected tree structure");
    weight 0.0;
    let errorTree = QTWeightedNode { left = tree.left
                          , right = tree.right
                          , age = tree.age
                          , partialLogWeight = log(0.0) // -Inf??
                          };
    return errorTree;
  }
}


/*
* coalesceQTTwig deals with a subtree that has two leafs as children
* (they can be weighted or unweighted)
*/  
function coalesceQTTwig(tree: QTTree, m: ModelDynamics): QTTree
{
  let leftTime = getAgeDiff(tree, tree.left);
  let rightTime = getAgeDiff(tree, tree.right);

  let leftMessageSequence = getMessageSequence(tree.left);
  //sapply(leftMessageSequence, printMtx);
  let rightMessageSequence = getMessageSequence(tree.right);

  let leftCharacterMessage = getCharacterMessage(tree.left, m.charMessages);
  //printMtx(leftCharacterMessage);
  let rightCharacterMessage = getCharacterMessage(tree.right, m.charMessages);

  // let n = length(leftMessageSequence);
  // let nRight = length(rightMessageSequence)

  // if !(n == nRight) {
  //   printLn("Error: coalesceQTTwig: message sequences have different lengths");
  //   weight 0.0;
  //   return QTWeightedNode { left: tree.left
  //                         , right: tree.right
  //                         , age: tree.age
  //                         , partialLogWeight: -Infinity
  //                         };
  // }

  let newLeftMessageSequence = evolveMessageSequence(leftMessageSequence, m, leftTime);
  //sapply(newLeftMessageSequence, printMtx);
  let newRightMessageSequence = evolveMessageSequence(rightMessageSequence, m, rightTime);
  // TODO the evolution function has to also return the numnber of character jumps

  // we need to zipWith left and right and element-wise multiply left and right
  let newMessageSequence = zipWith( mtxElemMul
                                  , newLeftMessageSequence
                                  , newRightMessageSequence 
                                  ); // TODO check zipWith and implement hadamardMul

  let logWeightSequence = sapply(newMessageSequence, computeMessageLogLikelihood);

  let newLeftCharMessage = evolveCharacter(leftCharacterMessage, m, leftTime);
  let newRightCharMessage = evolveCharacter(rightCharacterMessage, m, rightTime);

  let newCharMessage = mtxElemMul(newLeftCharMessage, newRightCharMessage);
  let logWeightChar = computeMessageLogLikelihood(newCharMessage);
  
  let partialLogWeight = seqSumReal(logWeightSequence) + logWeightChar; // TODO get from Mariana

  logWeight (partialLogWeight - tree.partialLogWeight);
  // printLn(join( [  "Merging "
  //               , int2string(getIndex(tree.left))
  //               , " and "
  //               ,  int2string(getIndex(tree.right)) 
  //               ]
  //             )
  //         ); //workaround for tree.left.index
  // printLn(join( [  "Partial log weight: "
  //               , real2string(partialLogWeight)
  //               , "Character contribution: "
  //               , real2string(logWeightChar)
  //               ]
  //             )
  //         );
  resample;

  let newTree = QTWeightedLeaf { age = tree.age
                               , messageSequence = newMessageSequence
                               , characterMessage = newCharMessage
                               , partialLogWeight = partialLogWeight
                               };

  return newTree;
}


function getMessageSequence(tree: QTTree): Tensor[Real][] 
{
  if (tree is QTLeaf)
  {
    return sapply(tree.stateSequence, getMessage);
  }
  
  if (tree is QTWeightedLeaf)
  {
    //let mesSeq = tree.messageSequence; // doesn't work
    // workaround reconstruct sequence
    let mesSeq = sapply(tree.messageSequence, idTensorReal);    
    return mesSeq;
  }
  
  else 
  {
    printLn("Error: getMessageSequence: unexpected tree structure");
    weight 0.0;
    return [];
  }
}


function getMessage(state: Int): Tensor[Real]
{
  /* NOTE(vsenderov, 2023-11-01)
     - Messages hard-coded for now
     - see https://github.com/treeppl/treeppl/issues/30
  */ 
  let messages = [[1., 0., 0., 0.],
                  [0., 1., 0., 0.],
                  [0., 0., 1., 0.],
                  [0., 0., 0., 1.] ];
  
  return rvecCreate(4, messages[addi(state, 1)]); // one-indexing of arrays, but zero-indexing of states
}


function getCharacterMessage(tree: QTTree, messages: Real[][]): Tensor[Real]
{
  if (tree is QTLeaf)
  {
    let l = length(messages);
    let curState = idInt(tree.characterState); // workaround
    let rTensor = rvecCreate(l, messages[addi(1, curState)]);
    return rTensor;
  } 
  
  if (tree is QTWeightedLeaf)
  {
    return tree.characterMessage;
  } 
  
  else 
  {
    error("Error: getCharacterMessage: unexpected tree structure");
    return rvecCreate(1, [0.0]);
  }
}



/**
* Using the Q-T-BIRDS model, evolve a single message along a branch of length t
* 
* @param dyn: ModelDynamics
* @param t: Real  Time of evolution
* @param mes: Tensor[Real]
*   The initial likelihood as a row vector
*/
function evolveMessageClosure ( dyn: ModelDynamics
                              , t: Real
                              , mes: Tensor[Real]
                              ): Tensor[Real]
{
  // TODO sample s jumps
  // for now just the molecular CTMC process; hard-coding the dimension 4
  let res = mes *@ (mtxExp(dyn.qMol *$ t));
  return res;
}


function evolveCharacter(mes: Tensor[Real], m: ModelDynamics, t: Real): Tensor[Real]
{
  // TODO on top of that we need to add the s-jumps
  let res = mes *@ (mtxExp(m.qChar *$ t));
  return res;
}


/**
* Using the Q-T-BIRDS model, evolve the messages along a branch of length t
*/
function evolveMessageSequence(messages: Tensor[Real][], m: ModelDynamics, t: Real)
{
  let evolveMessage = evolveMessageClosure(m, t); // partial application
  return sapply(messages, evolveMessage);
}


/**
* NOTE(vsenderov, 2023-11-08) This function proved very easy to introduce bugs
* into.  Makes the necesseity for writing tests even more apparent.
*/
function computeMessageLogLikelihood(mes: Tensor[Real]): Real
{
  // TODO incorporate equilibrium probabilities in this computation
  // TODO write tests
  let l = dim(mes)[2];
  let base = rep(l, 1.0);
  let cvec = cvecCreate(l, base);
  let msum = mes *@ cvec; // msum is now a 1x1 vector
  let msumReal = mtxGet(1, 1, msum);
  return log(msumReal);
}





///// WORKAROUNDS


function getAgeDiff(parent: QTTree, child: QTTree)
{
  return parent.age - child.age;
}


function idTensorReal(t: Tensor[Real])
{
  return t;
}


function idSeq(s: Real[]) {
  return s;
}


function idInt(i: Int) {
  return i;
}

function getIndex(tree: QTTree): Int
{
  if (tree is QTLeaf)
  {
    return tree.index;
  }

  return (9999);
}